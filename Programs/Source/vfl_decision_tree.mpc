# coding: latin-1
"""
  Provide decision tree MPC computation for CollaborativeML

  Keep waiting enough clients connected to this program. Once enough clients connected, read the input values and compute the
  logistic function, and return the gfp results (in the secret shared form) to the clients.

  This program does in three steps:
  (1) keep waiting enough clients MAX_NUM_CLIENTS connect, read the input values;
  (2) compute the gini impurity or label variance using the secret shares;
  (3) save as secret shares before returning the clients;

  Note each client connects in a single thread and so is potentially blocked.

  Each round / game will reset and so this runs indefinitiely.
"""

from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else
from Compiler import mpc_math, floatingpoint
from random import seed, randrange
from Compiler.program import Program
import ml

ARRAY_SIZE = 50
MAX_NBITS = 14
NULL = -2147483648

FIXED_F = 16
FIXED_K = 31
sfix.set_precision(FIXED_F, FIXED_K)
cfix.set_precision(FIXED_F, FIXED_K)

PORT_NUM = 18000
MAX_NUM_CLIENTS = 3
MAX_GLOBAL_SPLIT_NUM = 1000
MAX_CLASSES_NUM = 16
OVERFLOW_THRESHOLD = 0.0001

# accept a client's connection
def accept_client():
    client_socket_id = regint()
    acceptclientconnection(client_socket_id, PORT_NUM)
    return client_socket_id


# receive client 0's public parameters
def client_public_parameters(client_socket_id):
    input_parameters = Array(3, cint)
    input_parameters = cint.read_from_socket(client_socket_id, 3)
    return input_parameters[0], input_parameters[1], input_parameters[2]


# receive a client's private inputs
def client_input(client_socket_id, global_split_num, classes_num):

    input_statistics = sfix.Matrix(MAX_GLOBAL_SPLIT_NUM, MAX_CLASSES_NUM * 2)
    input_left_nums = Array(MAX_GLOBAL_SPLIT_NUM, sint)
    input_right_nums = Array(MAX_GLOBAL_SPLIT_NUM, sint)

    stat_num_per_split = 2 * classes_num
    tmp_array = Array(1, sint)

    @for_range(global_split_num)
    def _(i):
        @for_range(stat_num_per_split)
        def _(j):
            tmp_array = sint.receive_from_client(1, client_socket_id)
            input_statistics[i][j] = sfix._new(tmp_array[0])

    @for_range(global_split_num)
    def _(i):
        tmp_array = sint.receive_from_client(1, client_socket_id)
        input_left_nums[i] = tmp_array[0]
        #print_ln('received input_left_nums[%s] = %s', i, input_left_nums[i].reveal())

    @for_range(global_split_num)
    def _(i):
        tmp_array = sint.receive_from_client(1, client_socket_id)
        input_right_nums[i] = tmp_array[0]

    return input_statistics, input_left_nums, input_right_nums


# compute Gini impurity for classification
def compute_gini(clients_statistics, clients_left_nums, clients_right_nums, global_split_num, classes_num):

    splits_impurity = sfix.Matrix(MAX_GLOBAL_SPLIT_NUM, 3)
    left_sum = Array(1, sfix)
    right_sum = Array(1, sfix)
    left_impurity = Array(1, sfix)
    right_impurity = Array(1, sfix)

    @for_range(global_split_num)
    def _(i):
        left_sum[0] = 0
        right_sum[0] = 0
        left_probs = Array(MAX_CLASSES_NUM, sfix)
        right_probs = Array(MAX_CLASSES_NUM, sfix)
        left_impurity[0] = 1.0
        right_impurity[0] = 1.0

        # compute the sum of left and right branches
        @for_range(classes_num * 2)
        def _(j):
            @if_e(j % 2 == 0)
            def _():
                left_sum[0] = left_sum[0] + clients_statistics[i][j]
            @else_
            def _():
                right_sum[0] = right_sum[0] + clients_statistics[i][j]

        #print_ln('left_sum[%s] = %s, right_sum[%s] = %s', i, left_sum[0].reveal(), i, right_sum[0].reveal())
        #print_ln('clients_left_nums[%s] = %s, clients_right_nums[%s] = %s', i, clients_left_nums[i].reveal(), i, clients_right_nums[i].reveal())

        #@if_(right_sum[0].reveal() == 0)
        #def _():
        #    print_ln('This is an overflow number, right_sum[%s] = %s', i, right_sum[0].reveal())

        # compute probabilities of each class
        @for_range(classes_num * 2)
        def _(j):
            x = j / 2
            @if_e(j % 2 == 0)
            def _():
                #print_ln('clients_statistics[%s][%s] = %s', i, j, clients_statistics[i][j].reveal())
                #print_ln('left_sum[0] = %s', left_sum[0].reveal())
                left_probs[x] = clients_statistics[i][j] / left_sum[0]
                #print_ln('left_probs[%s] = %s', x, left_probs[x].reveal())
            @else_
            def _():
                #print_ln('clients_statistics[%s][%s] = %s', i, j, clients_statistics[i][j].reveal())
                #print_ln('right_sum[0] = %s', right_sum[0].reveal())
                right_probs[x] = clients_statistics[i][j] / right_sum[0]
                #print_ln('right_probs[%s] = %s', x, right_probs[x].reveal())

        # compute left and right impurity
        @for_range(classes_num)
        def _(j):
            left_impurity[0] = left_impurity[0] - (left_probs[j] * left_probs[j])
            right_impurity[0] = right_impurity[0] - (right_probs[j] * right_probs[j])

        @if_(mpc_math.abs_fx(left_impurity[0]).reveal() < OVERFLOW_THRESHOLD)
        def _():
            left_impurity[0] = 0

        @if_(mpc_math.abs_fx(right_impurity[0]).reveal() < OVERFLOW_THRESHOLD)
        def _():
            right_impurity[0] = 0

        splits_impurity[i][0] = left_impurity[0] + right_impurity[0]
        splits_impurity[i][1] = left_impurity[0]
        splits_impurity[i][2] = right_impurity[0]
        #print_ln('splits_impurity[%s][0] = %s', i, splits_impurity[i][0].reveal())
        #print_ln('splits_impurity[%s][1] = %s', i, splits_impurity[i][1].reveal())
        #print_ln('splits_impurity[%s][2] = %s', i, splits_impurity[i][2].reveal())

    return splits_impurity

# compute variance for regression
def compute_variance(clients_statistics, clients_left_nums, clients_right_nums, global_split_num, classes_num):

    splits_impurity = sfix.Matrix(MAX_GLOBAL_SPLIT_NUM, 3)

    @for_range(global_split_num)
    def _(i):
        left_variance = sfix(0.0)
        right_variance = sfix(0.0)
        left_variance = (clients_statistics[i][2] / clients_left_nums[i]) - (clients_statistics[i][0] / clients_left_nums[i]) ** 2
        right_variance = (clients_statistics[i][3] / clients_right_nums[i]) - (clients_statistics[i][1] / clients_right_nums[i]) ** 2

        @if_(mpc_math.abs_fx(left_variance).reveal() < OVERFLOW_THRESHOLD)
        def _():
            left_variance = 0

        @if_(mpc_math.abs_fx(right_variance).reveal() < OVERFLOW_THRESHOLD)
        def _():
            right_variance = 0

        splits_impurity[i][0] = left_variance + right_variance
        splits_impurity[i][1] = left_variance
        splits_impurity[i][2] = right_variance

    return splits_impurity

# find best split index
def find_best_split(splits_impurity, global_split_num):

    best_split_index = Array(1, cint)
    best_split_index[0] = -1
    best_impurity = Array(1, sfix)
    best_impurity[0] = 2.0
    best_left_impurity = Array(1, sfix)
    best_left_impurity[0] = 1.0
    best_right_impurity = Array(1, sfix)
    best_right_impurity[0] = 1.0

    @for_range(global_split_num)
    def _(i):
        is_new_min = best_impurity[0] > splits_impurity[i][0]
        @if_((is_new_min == 1).reveal())
        def _():
            best_split_index[0] = i
            best_impurity[0] = splits_impurity[i][0]

    #print_ln('The found best_split_index[0] = %s', best_split_index[0])
    best_left_impurity[0] = splits_impurity[best_split_index][1]
    best_right_impurity[0] = splits_impurity[best_split_index][2]

    return best_split_index[0], best_left_impurity[0], best_right_impurity[0]


# write result to all the clients, where best_split_index is public while best_left_impurity and best_right_impurity are private
def write_result_to_clients(sockets, number_clients, best_split_index, best_left_impurity, best_right_impurity):

    # Send share of result to all clients. However, in this way, every client receives the final result, which is not desirable,
    # should split the result array into number_clients shares, and send each share to each client

    #print_ln('begin to write best_split_index to each client')
    #@for_range(number_clients)
    #def loop_body(i):
    #    #print_ln('socket[%s] = %s', i, sockets[i])
    #    cint.write_to_socket(sockets[i], best_split_index)

    sint_result = Array(2, sint)
    sint_result[0] = best_left_impurity.v
    sint_result[1] = best_right_impurity.v

    # split sint_result to number_clients parts and send each part to each client
    sint_result_matrix = sint.Matrix(MAX_NUM_CLIENTS, 3)
    temp_sum = Array(1, sint)
    @for_range(2)
    def outer_loop(j):
        temp_sum[0] = 0
        @for_range(number_clients)
        def inner_loop(i):
            @if_e(i < number_clients - 1)
            def _():
                random_ij = sint.get_random_int(MAX_NBITS)
                temp_sum[0] = temp_sum[0] + random_ij
                sint_result_matrix[i][j] = random_ij
            @else_
            def _():
                sint_result_matrix[i][j] = sint_result[j] - temp_sum[0]

    @for_range(number_clients)
    def _(i):
        sint_result_matrix[i][2] = best_split_index

    """
    print_ln('Begin to print intermediate information')
    print_ln('number_clients = %s', number_clients)
    @for_range(3)
    def _(j):
        @for_range(number_clients)
        def _(i):
            print_ln('sint_result_matrix[%s][%s] = %s', i, j, sint_result_matrix[i][j].reveal())
    """

    #print_ln('begin to write shares to each client')
    @for_range(number_clients)
    def loop_body(i):
        #print_ln('socket[%s] = %s', i, sockets[i])
        sint.write_shares_to_socket(sockets[i], sint_result_matrix[i])


def main():
    """Listen in while loop for clients to join a game.
    Once maximum reached or have notified that round finished, run comparison and return result."""
    # Start listening for client socket connections
    listen(PORT_NUM)
    print_ln('Listening for client connections on base port %s', PORT_NUM)

    @do_while
    def computing_loop():

        print_ln('Starting a new recursive node.')

        # Clients socket id (integer).
        client_sockets = Array(MAX_NUM_CLIENTS, regint)
        # Number of clients
        number_clients = MemValue(regint(0))
        # Keep track of received inputs
        seen = Array(MAX_NUM_CLIENTS, regint)
        seen.assign_all(0)

        # step 1: Loop round waiting for each client to connect
        @do_while
        def client_connections():
            client_id = accept_client()
            @if_(client_id >= MAX_NUM_CLIENTS)
            def _():
                print_ln('client id too high')
                crash()
            client_sockets[client_id] = client_id
            seen[client_id] = 1
            return sum(seen) < MAX_NUM_CLIENTS

        # client secret inputs
        clients_statistics = sfix.Matrix(MAX_GLOBAL_SPLIT_NUM, MAX_CLASSES_NUM * 2)
        clients_left_nums = Array(MAX_GLOBAL_SPLIT_NUM, sint)
        clients_right_nums = Array(MAX_GLOBAL_SPLIT_NUM, sint)

        print_ln('Finish step 1')

        # step 2: Receive parameters for further computation
        #print_ln('client_sockets[0] = %s', client_sockets[0])
        type, global_split_num, classes_num = client_public_parameters(client_sockets[0])
        print_ln('type = %s', type)
        print_ln('global_split_num = %s', global_split_num)
        print_ln('classes_num = %s', classes_num)
        print_ln('Finish step 2')

        # init the values, otherwise there is problem
        @for_range(global_split_num)
        def _(i):
            clients_left_nums[i] = 0
            clients_right_nums[i] = 0
            @for_range(classes_num * 2)
            def _(j):
                clients_statistics[i][j] = 0


        # step 3: Receive and aggregate the clients input values
        @for_range(MAX_NUM_CLIENTS)
        def _(client_id):
            input_statistics, input_left_nums, input_right_nums = client_input(client_id, global_split_num, classes_num)
            # aggregate into clients_statistics, clients_left_nums, clients_right_nums
            @for_range(global_split_num)
            def _(i):
                clients_left_nums[i] = clients_left_nums[i] + input_left_nums[i]
                clients_right_nums[i] = clients_right_nums[i] + input_right_nums[i]
                #print_ln('input_left_nums[%s] = %s', i, input_left_nums[i].reveal())
                #print_ln('input_right_nums[%s] = %s', i, input_right_nums[i].reveal())
                #print_ln('clients_left_nums[%s] = %s', i, clients_left_nums[i].reveal())
                #print_ln('clients_right_nums[%s] = %s', i, clients_right_nums[i].reveal())
                @for_range(classes_num * 2)
                def _(j):
                    clients_statistics[i][j] = clients_statistics[i][j] + input_statistics[i][j]
                    #print_ln('clients_statistics[%s][%s] = %s', i, j, clients_statistics[i][j].reveal())

        # truncate the overflow values around 0
        @for_range(global_split_num)
        def _(i):
            @for_range(classes_num * 2)
            def _(j):
                @if_(mpc_math.abs_fx(clients_statistics[i][j]).reveal() < OVERFLOW_THRESHOLD)
                def _():
                    clients_statistics[i][j] = 0


        print_ln('Finish step 3')

        # step 4: Compute the Gini impurity or label variance according to the type
        # the first element is the sum of impurity, the second and third elements are left and right impurity, respectively
        splits_impurity = sfix.Matrix(MAX_GLOBAL_SPLIT_NUM, 3)
        @if_e(type == 0)
        def _():
            # compute Gini impurity
            splits_impurity_copy = compute_gini(clients_statistics, clients_left_nums, clients_right_nums, global_split_num, classes_num)
            @for_range(global_split_num)
            def _(i):
                @for_range(3)
                def _(j):
                    splits_impurity[i][j] = splits_impurity_copy[i][j]
        @else_
        def _():
            # compute label variance
            splits_impurity_copy = compute_variance(clients_statistics, clients_left_nums, clients_right_nums, global_split_num, classes_num)
            @for_range(global_split_num)
            def _(i):
                @for_range(3)
                def _(j):
                    splits_impurity[i][j] = splits_impurity_copy[i][j]

        print_ln('Finish step 4')

        # step 5: Determine the best split with minimum impurity on the sum of left and right branches
        best_split_index, best_left_impurity, best_right_impurity = find_best_split(splits_impurity, global_split_num)

        print_ln('Finish step 5')

        # step 6: Organize the result and send back to the clients
        write_result_to_clients(client_sockets, MAX_NUM_CLIENTS, best_split_index, best_left_impurity, best_right_impurity)
        print_ln('best_split_index = %s', best_split_index)
        print_ln('best_left_impurity = %s', best_left_impurity.reveal())
        print_ln('best_right_impurity = %s', best_right_impurity.reveal())

        print_ln('Finish step 6')

        return True

main()